#! /usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *

PACKAGE = "mgm_ros"
ID = "MGM"
gen = ParameterGenerator()

################################################################################
# Normal Parameters
################################################################################

# queue_size
gen.add('queue_size', double_t, level=0, min=1, max=100, default=5,
        description="Queue size for incoming image_rect messages")
# approx_sync
gen.add('approximate_sync', bool_t, level=0, default=False,
        description="Relax exact sync requirement for img and camera info msgs")
# swap_lr
gen.add('swap_lr', bool_t, level=0, default=False,
        description="Swap LR channels for disparity calculation")
# publish_rate
gen.add('publish_rate', double_t, level=0, min=0, max=100, default=30,
        description="How often to publish new disparity images")

# scales
gen.add('scales', int_t, level=0, min=1, max=1000, default=3,
        description='Number of scales to check for multiscale')
# multiscale
gen.add('use_multiscale', bool_t, level=0, default=True,
        description="Flag to use multiscale or normal MGM")
# P1
gen.add('P1', int_t, level=0, min=0, max=100000, default=8,
        description='Close disparity penalty for SGM')
# P2
gen.add('P2', int_t, level=0, min=0, max=100000, default=32,
        description='Far disparity penalty for SGM')
# dmin
gen.add('min_disparity', int_t, level=0, min=-2048, max=2048, default=-30,
        description='Minimum Disparity')
# dmax
gen.add('max_disparity', int_t, level=0, min=-2048, max=2048, default=30,
        description='Maximum Disparity')
# NDIR
gen.add('num_directions', int_t, level=0, min=2, max =16, default=4,
        description='Directions per pixel to check disparity (multiple of 2)')
# aP1
gen.add('P1_mul', double_t, level=0, min=0, max=100, default=1,
        description='Multiplier factor for P1')
# aP2
gen.add('P2_mul', double_t, level=0, min=0, max=100, default=1,
        description='Multiplier factor for P2')
# aThresh
gen.add('mul_thresh', int_t, level=0, min=0, max=100, default=5,
        description='Threshold for multiplier factor')
# truncDist
gen.add('trunc_dist', double_t, level=0, min=0, default=1000000,
        description='Truncate distances at: num_channels * trunc_dist')
# distance
distance_enum = gen.enum([gen.const('census_distance', str_t, 'census',
                                    'Census (Hamming distance of match)'),
                          gen.const('AD', str_t, 'ad',
                                    'Averaged Distance'),
                          gen.const('SD', str_t, 'sd',
                                    'Symmetry Distance'),
                          gen.const('NCC', str_t, 'ncc',
                                    'Normalised Cross-Correlation'),
                          gen.const('BTAD', str_t, 'btad',
                                    'BTAD (Some variant of AD)'),
                          gen.const('BTSD', str_t, 'btsd',
                                    'BTSD (Some variant of SD)')],
                          'Distance Function')
gen.add('distance_function', str_t, level=0, default="ad",
        description='Image distance function', edit_method=distance_enum)
# prefilter
prefilter_enum = gen.enum([gen.const('prefilter_none', str_t, 'none',
                                     'No prefilter'),
                           gen.const('census', str_t, 'census',
                                     'Census'),
                           gen.const('sobel_x', str_t, 'sobelx',
                                     'Sobel_x')],
                           'Prefilter function')
gen.add('prefilter_function', str_t, level=0, default="none",
        description='Image prefilter function', edit_method=prefilter_enum)
# refine
refine_enum = gen.enum([gen.const('refine_none', str_t, 'none',
                                  'No refinement function'),
                        gen.const('v_fit', str_t, 'vfit',
                                  'V-Fit'),
                        gen.const('parabola', str_t, 'parabola',
                                  'Parabola'),
                        gen.const('cubic', str_t, 'cubic',
                                  'Cubic')],
                        'Subpixel refinement function')
gen.add('subpixel_refinement', str_t, level=0, default="none",
        description='Subpixel refinement function', edit_method=refine_enum)

################################################################################
# Smart Parameters
################################################################################

# CENSUS_NCC_WIN
gen.add('CENSUS_NCC_WIN', int_t, level=0, min=0, max=100, default=3,
        description='Size of window for census and NCC distance functions')
# TESTLRRL
gen.add('TESTLRRL', bool_t, level=0, default=True,
        description='Flag to validate LR and RL disparity correspondence')
# REMOVESMALLCC
gen.add('REMOVESMALLCC', int_t, level=0, min=0, max=2048, default=0,
        description='Remove connected components of disparity smaller N')
# MINDIFF
gen.add('MINDIFF', int_t, level=0, min=-2048, max=2048, default=-1,
        description='Remove disparity inconsistent with minfilter for NCC_Census')
# TSGM
gen.add('TSGM', int_t, level=0, min=0, max=100, default=4,
        description='Tube disparity SGM regularity level')
# TSGM_ITER
gen.add('TSGM_ITER', int_t, level=0, min=0, max=100, default=1,
        description='Number of iterations for TSGM algorithm')
# TSGM_FIX_OVERCOUNT
gen.add('TSGM_FIX_OVERCOUNT', bool_t, level=0, default=True,
        description='Fix overcounting of data term in energy')
# TSGM_DEBUG
gen.add('TSGM_DEBUG', bool_t, level=0, default=False,
        description='Print debug information for TSGM algorithm')
# TSGM_2LMIN
gen.add('TSGM_2LMIN', bool_t, level=0, default=False,
        description='Improve TSGM cost for TSGM=2 only (overrides TSGM)')
# SUBPIX
gen.add('SUBPIX', double_t, level=0, min=1, max=10, default=1,
        description='Subpixel steps (Recommended 1 or 2)')
# USE_TRUNCATED_LINEAR_POTENTIALS
gen.add('USE_TRUNCATED_LINEAR_POTENTIALS', bool_t, level=0, default=False,
        description='If true, use Felzenszwalb-Huttenlocher potentials')
# MEDIAN
gen.add('MEDIAN', bool_t, level=0, default=False,
        description='If true, postprocess with a median filter')


exit(gen.generate(PACKAGE, PACKAGE, ID))
